---
- name: Check if the bridge ports are still defined using the old way
  fail:
    msg: "Ports shouldn't be defined this way."
  when: item.ports is defined
  with_items:
    - "{{ network_bridge_interfaces }}"

- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install the required  packages in Redhat derivatives
  yum:
    name: "{{ network_pkgs }}"
  vars:
     packages:  "{{ network_pkgs }}"
  when: ansible_os_family == 'RedHat' and network_check_packages

- name: Install the required packages in Debian derivatives
  apt:
    name: "{{ network_pkgs }}"
  vars:
     packages:  "{{ network_pkgs }}"
  environment: env
  when: ansible_os_family == 'Debian'

- name: Make sure the include line is there in interfaces file
  lineinfile: >
     regexp="^source\ \/etc\/network\/interfaces.d\/\*"
     line="source /etc/network/interfaces.d/*"
     dest=/etc/network/interfaces
     state=present
     insertafter=EOF
  when: ansible_os_family == "Debian"

- name: Create the directory for interface cfg files
  file: path=/etc/network/interfaces.d  state=directory
  when: ansible_os_family == "Debian"

- name: Create the network configuration file for ethernet devices
  template: src=ethernet_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined
  register: ether_result
  notify:
   - restart network

- name: Write configuration files for rhel route configuration
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  notify:
   - restart network

- name: Add ether routes manually to routing table if network_ip_route_ephemeral is True and if there is only one route on the interface
  command: "ip route add {{ item.route[0].network }}/{{ item.route[0].netmask }} via {{ item.route[0].gateway }} dev {{ item.device }}"
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat' and network_ip_route_ephemeral and item.route|length < 2
  register: reg_network_iproute
  failed_when: reg_network_iproute.rc|int != 0 and reg_network_iproute.rc|int != 2
  changed_when: reg_network_iproute.rc|int == 0

- name: Create the network configuration file for bond devices
  template: src=bond_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined
  register: bond_result
  notify:
   - restart network

- name: template in bonding.conf module settings
  template: src=bonding.conf.j2 dest={{ bond_modules_path}}/bonding.conf
  when: network_bond_interfaces is defined and network_extra_bonding_module_options != ""

- name: Make sure the bonding module is loaded
  modprobe: name=bonding state=present
  when: bond_result is changed

- name: Write configuration files for route configuration
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  notify:
   - restart network

- name: Add bond routes manually to routing table if network_ip_route_ephemeral is True and if there is only one route on the interface
  command: "ip route add {{ item.route[0].network }}/{{ item.route[0].netmask }} via {{ item.route[0].gateway }} dev {{ item.device }}"
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat' and network_ip_route_ephemeral and item.route|length < 2
  register: reg_network_iproute
  failed_when: reg_network_iproute.rc|int != 0 and reg_network_iproute.rc|int != 2
  changed_when: reg_network_iproute.rc|int == 0

- name: Create the network configuration file for slave in the bond devices
  template: src=bond_slave_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements:
   - "{{network_bond_interfaces}}"
   - bond_slaves

  when: network_bond_interfaces is defined
  register: bond_port_result
  notify:
   - restart network

- name: Create the network configuration file for vlan devices
  template: src=ethernet_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined
  register: vlan_result
  notify:
   - restart network

- name: Add vlan interfaces manually if network_vlan_ephemeral is True
  command: "ip link add link {{ item.device.split('.')[0] }} name {{ item.device }} type vlan id {{ item.device.split('.')[1] }}"
  args:
    creates: "/sys/devices/virtual/net/{{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined and ansible_os_family == 'RedHat' and network_vlan_ephemeral
  register: reg_network_vlan
  failed_when: reg_network_vlan.rc|int != 0 and reg_network_vlan.rc|int != 2
  changed_when: reg_network_vlan.rc|int == 0

- name: Set MTU manually on vlan interfaces if network_vlan_ephemeral is True and the interface parameters include mtu
  command: "ip link set mtu {{ item.mtu }} {{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined and ansible_os_family == 'RedHat' and network_vlan_ephemeral and item.mtu is defined
  register: reg_network_vlan
  failed_when: reg_network_vlan.rc|int != 0 and reg_network_vlan.rc|int != 2
  changed_when: reg_network_vlan.rc|int == 0

- name: Add vlan interface IP address manually if network_vlan_ephemeral is True and the interface parameters include address
  command: "ip addr add {{ item.address }}/{{ item.netmask }} dev {{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined and ansible_os_family == 'RedHat' and network_vlan_ephemeral and item.address is defined
  register: reg_network_vlan
  failed_when: reg_network_vlan.rc|int != 0 and reg_network_vlan.rc|int != 2
  changed_when: reg_network_vlan.rc|int == 0

- name: Ensure vlan interface is up if network_vlan_ephemeral is True
  command: "ip link set up {{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined and ansible_os_family == 'RedHat' and network_vlan_ephemeral
  register: reg_network_vlan
  failed_when: reg_network_vlan.rc|int != 0 and reg_network_vlan.rc|int != 2
  changed_when: reg_network_vlan.rc|int == 0

- name: Write configuration files for rhel route configuration with vlan
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  notify:
   - restart network

- name: Add vlan routes manually to routing table if network_ip_route_ephemeral is True and if there is only one route on the interface
  command: "ip route add {{ item.route[0].network }}/{{ item.route[0].netmask }} via {{ item.route[0].gateway }} dev {{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat' and network_ip_route_ephemeral and item.route|length < 2
  register: reg_network_iproute
  failed_when: reg_network_iproute.rc|int != 0 and reg_network_iproute.rc|int != 2
  changed_when: reg_network_iproute.rc|int == 0

- name: Create the network configuration file for bridge devices
  template: src=bridge_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined
  register: bridge_result
  notify:
   - restart network

- name: Add bridges manually if network_bridge_ephemeral is True
  command: "brctl addbr {{ item.device }}"
  args:
    creates: "/sys/devices/virtual/net/{{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined and ansible_os_family == 'RedHat' and network_bridge_ephemeral
  register: reg_network_bridge
  failed_when: reg_network_bridge.rc|int != 0 and reg_network_bridge.rc|int != 2
  changed_when: reg_network_bridge.rc|int == 0

- name: Ensure bridge interface is up if network_bridge_ephemeral is True
  command: "ip link set up {{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined and ansible_os_family == 'RedHat' and network_bridge_ephemeral
  register: reg_network_bridge
  failed_when: reg_network_bridge.rc|int != 0 and reg_network_bridge.rc|int != 2
  changed_when: reg_network_bridge.rc|int == 0

- name: Plug VLAN interfaces to bridges manually if network_bridge_ephemeral and network_vlan_ephemeral are True
  command: "brctl addif {{ item.bridge }} {{ item.device }}"
  args:
    creates: "/sys/devices/virtual/net/{{ item.bridge }}/lower_{{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_bridge_interfaces is defined and ansible_os_family == 'RedHat' and network_bridge_ephemeral and network_vlan_ephemeral
  register: reg_network_bridge_vlan
  failed_when: reg_network_bridge_vlan.rc|int != 0 and reg_network_bridge_vlan.rc|int != 2
  changed_when: reg_network_bridge_vlan.rc|int == 0

- name: Write configuration files for rhel route configuration
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  notify:
   - restart network

- name: Add bridge routes manually to routing table if network_ip_route_ephemeral is True and if there is only one route on the interface
  command: "ip route add {{ item.route[0].network }}/{{ item.route[0].netmask }} via {{ item.route[0].gateway }} dev {{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat' and network_ip_route_ephemeral and item.route|length < 2
  register: reg_network_iproute
  failed_when: reg_network_iproute.rc|int != 0 and reg_network_iproute.rc|int != 2
  changed_when: reg_network_iproute.rc|int == 0

- name: Make sure that are handlers are done before ending the role
  meta: flush_handlers
